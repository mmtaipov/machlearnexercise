{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import catboost\n",
    "\n",
    "import numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "from copy import deepcopy\n",
    "from tqdm.notebook import tqdm\n",
    "import os\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from catboost import CatBoostRegressor\n",
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.model_selection import RandomizedSearchCV\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"/Users/mikhailtaipov/Downloads/ef-msu-master-comp3/train.csv\")\n",
    "test = pd.read_csv(\"/Users/mikhailtaipov/Downloads/ef-msu-master-comp3/test.csv\")\n",
    "sample=pd.read_csv(\"/Users/mikhailtaipov/Downloads/ef-msu-master-comp3/sample_submission.csv\")\n",
    "test_ids = test[\"id\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mape(y,p):\n",
    "    return np.nanmean(np.divide(np.abs((y - p)), np.abs(y)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>week</th>\n",
       "      <th>center_id</th>\n",
       "      <th>meal_id</th>\n",
       "      <th>checkout_price</th>\n",
       "      <th>base_price</th>\n",
       "      <th>emailer_for_promotion</th>\n",
       "      <th>homepage_featured</th>\n",
       "      <th>rating</th>\n",
       "      <th>city_code</th>\n",
       "      <th>region_code</th>\n",
       "      <th>center_type</th>\n",
       "      <th>op_area</th>\n",
       "      <th>category</th>\n",
       "      <th>cuisine</th>\n",
       "      <th>num_orders</th>\n",
       "      <th>relprice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1379560</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>1885</td>\n",
       "      <td>-1.270654</td>\n",
       "      <td>-1.257652</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.418834</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Thai</td>\n",
       "      <td>177</td>\n",
       "      <td>1.010338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1466964</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>1993</td>\n",
       "      <td>-1.270654</td>\n",
       "      <td>-1.361643</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.114370</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Thai</td>\n",
       "      <td>270</td>\n",
       "      <td>0.933177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1346989</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>2539</td>\n",
       "      <td>-1.283632</td>\n",
       "      <td>-1.361453</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.066914</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Thai</td>\n",
       "      <td>189</td>\n",
       "      <td>0.942840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1338232</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>2139</td>\n",
       "      <td>0.064550</td>\n",
       "      <td>0.544444</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.516448</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Indian</td>\n",
       "      <td>54</td>\n",
       "      <td>0.118561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1448490</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>2631</td>\n",
       "      <td>-0.567905</td>\n",
       "      <td>-0.687721</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.700056</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Indian</td>\n",
       "      <td>40</td>\n",
       "      <td>0.825777</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  week  center_id  meal_id  checkout_price  base_price  \\\n",
       "0  1379560     1         55     1885       -1.270654   -1.257652   \n",
       "1  1466964     1         55     1993       -1.270654   -1.361643   \n",
       "2  1346989     1         55     2539       -1.283632   -1.361453   \n",
       "3  1338232     1         55     2139        0.064550    0.544444   \n",
       "4  1448490     1         55     2631       -0.567905   -0.687721   \n",
       "\n",
       "   emailer_for_promotion  homepage_featured    rating  city_code  region_code  \\\n",
       "0                      0                  0 -0.418834        647           56   \n",
       "1                      0                  0 -0.114370        647           56   \n",
       "2                      0                  0  0.066914        647           56   \n",
       "3                      0                  0 -0.516448        647           56   \n",
       "4                      0                  0 -0.700056        647           56   \n",
       "\n",
       "  center_type  op_area   category cuisine  num_orders  relprice  \n",
       "0      TYPE_C        2  Beverages    Thai         177  1.010338  \n",
       "1      TYPE_C        2  Beverages    Thai         270  0.933177  \n",
       "2      TYPE_C        2  Beverages    Thai         189  0.942840  \n",
       "3      TYPE_C        2  Beverages  Indian          54  0.118561  \n",
       "4      TYPE_C        2  Beverages  Indian          40  0.825777  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " train[\"checkout_price\"]=train[\"checkout_price\"]-train[\"checkout_price\"].mean()\n",
    "train[\"checkout_price\"]=train[\"checkout_price\"]/(train[\"checkout_price\"].std())\n",
    "train[\"base_price\"]=train[\"base_price\"]-train[\"base_price\"].mean()\n",
    "train[\"base_price\"]=train[\"base_price\"]/(train[\"base_price\"].std())\n",
    " \n",
    "train[\"rating\"]=train[\"rating\"]-train[\"rating\"].mean()\n",
    "train[\"rating\"]=train[\"rating\"]/(train[\"rating\"].std())\n",
    "train[\"op_area\"]= (np.round(train[\"op_area\"])).astype(int)\n",
    "train[\"relprice\"]=train[\"checkout_price\"]/train[\"base_price\"]\n",
    " \n",
    "train.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>week</th>\n",
       "      <th>center_id</th>\n",
       "      <th>meal_id</th>\n",
       "      <th>checkout_price</th>\n",
       "      <th>base_price</th>\n",
       "      <th>emailer_for_promotion</th>\n",
       "      <th>homepage_featured</th>\n",
       "      <th>rating</th>\n",
       "      <th>city_code</th>\n",
       "      <th>region_code</th>\n",
       "      <th>center_type</th>\n",
       "      <th>op_area</th>\n",
       "      <th>category</th>\n",
       "      <th>cuisine</th>\n",
       "      <th>relprice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1256496</td>\n",
       "      <td>100</td>\n",
       "      <td>55</td>\n",
       "      <td>1885</td>\n",
       "      <td>-1.243297</td>\n",
       "      <td>-1.289691</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.425949</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Thai</td>\n",
       "      <td>0.964027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1298009</td>\n",
       "      <td>100</td>\n",
       "      <td>55</td>\n",
       "      <td>1993</td>\n",
       "      <td>-1.211645</td>\n",
       "      <td>-1.272098</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.148432</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Thai</td>\n",
       "      <td>0.952478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1348875</td>\n",
       "      <td>100</td>\n",
       "      <td>55</td>\n",
       "      <td>2539</td>\n",
       "      <td>-1.205779</td>\n",
       "      <td>-1.254505</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.010758</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Thai</td>\n",
       "      <td>0.961159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1272771</td>\n",
       "      <td>100</td>\n",
       "      <td>55</td>\n",
       "      <td>2139</td>\n",
       "      <td>-0.192781</td>\n",
       "      <td>-0.316568</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.433665</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Indian</td>\n",
       "      <td>0.608970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1313265</td>\n",
       "      <td>100</td>\n",
       "      <td>55</td>\n",
       "      <td>2631</td>\n",
       "      <td>-1.549311</td>\n",
       "      <td>-1.242957</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.195816</td>\n",
       "      <td>647</td>\n",
       "      <td>56</td>\n",
       "      <td>TYPE_C</td>\n",
       "      <td>2</td>\n",
       "      <td>Beverages</td>\n",
       "      <td>Indian</td>\n",
       "      <td>1.246472</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id  week  center_id  meal_id  checkout_price  base_price  \\\n",
       "0  1256496   100         55     1885       -1.243297   -1.289691   \n",
       "1  1298009   100         55     1993       -1.211645   -1.272098   \n",
       "2  1348875   100         55     2539       -1.205779   -1.254505   \n",
       "3  1272771   100         55     2139       -0.192781   -0.316568   \n",
       "4  1313265   100         55     2631       -1.549311   -1.242957   \n",
       "\n",
       "   emailer_for_promotion  homepage_featured    rating  city_code  region_code  \\\n",
       "0                      0                  0  0.425949        647           56   \n",
       "1                      0                  0 -1.148432        647           56   \n",
       "2                      0                  0  1.010758        647           56   \n",
       "3                      0                  0 -0.433665        647           56   \n",
       "4                      0                  0  0.195816        647           56   \n",
       "\n",
       "  center_type  op_area   category cuisine  relprice  \n",
       "0      TYPE_C        2  Beverages    Thai  0.964027  \n",
       "1      TYPE_C        2  Beverages    Thai  0.952478  \n",
       "2      TYPE_C        2  Beverages    Thai  0.961159  \n",
       "3      TYPE_C        2  Beverages  Indian  0.608970  \n",
       "4      TYPE_C        2  Beverages  Indian  1.246472  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test[\"checkout_price\"]=test[\"checkout_price\"]-test[\"checkout_price\"].mean()\n",
    "test[\"checkout_price\"]=test[\"checkout_price\"]/(test[\"checkout_price\"].std())\n",
    "test[\"base_price\"]=test[\"base_price\"]-test[\"base_price\"].mean()\n",
    "test[\"base_price\"]=test[\"base_price\"]/(test[\"base_price\"].std())\n",
    " \n",
    "\n",
    "test[\"rating\"]=test[\"rating\"]-test[\"rating\"].mean()\n",
    "test[\"rating\"]=test[\"rating\"]/(test[\"rating\"].std())\n",
    "test[\"relprice\"]=test[\"checkout_price\"]/test[\"base_price\"]\n",
    " \n",
    "test[\"op_area\"]= (np.round(test[\"op_area\"])).astype(int)\n",
    "test.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_orders</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1256496</td>\n",
       "      <td>1927.248809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1298009</td>\n",
       "      <td>428.343615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1348875</td>\n",
       "      <td>1671.351608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1272771</td>\n",
       "      <td>427.470455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1313265</td>\n",
       "      <td>1499.504048</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        id   num_orders\n",
       "0  1256496  1927.248809\n",
       "1  1298009   428.343615\n",
       "2  1348875  1671.351608\n",
       "3  1272771   427.470455\n",
       "4  1313265  1499.504048"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cv_and_predict(\n",
    "    df_train,\n",
    "    df_test,\n",
    "    train_y,\n",
    "    model,\n",
    "    log_transform_target=True,\n",
    "    do_scaling=False,\n",
    "    n_splits=5,\n",
    "    random_state=42,\n",
    "    verbose=True,\n",
    "):\n",
    "    \"\"\"\n",
    "    Функция для кросс-валидации и предикта на тест\n",
    "\n",
    "    :param df_train: Трейн-датафрейм\n",
    "    :param df_test: Тест-датафрейм\n",
    "    :param train_y: Ответы на трейн\n",
    "    :param model: Модель, которую мы хотим учить\n",
    "    :param log_transform_target: Делаем ли лог-трансформацию таргета при обучении\n",
    "    :param do_scaling: Делаем ли скейлинг признаков\n",
    "    :param n_splits: Количество сплитов для KFold\n",
    "    :param random_state: random_state для KFold\n",
    "    :param verbose: Делаем ли print'ы\n",
    "\n",
    "    :return: pred_test: Предсказания на тест; oof_df: OOF предсказания\n",
    "    \"\"\"\n",
    "\n",
    "    kf = KFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n",
    "\n",
    "    # В датафрейме oof_df будут храниться настоящий таргет трейна и OOF предсказания на трейн.\n",
    "    # Инициализируем prediction_oof нулями и будем заполнять предсказаниями в процессе валидации\n",
    "    oof_df = pd.DataFrame()\n",
    "    oof_df[\"target\"] = train_y\n",
    "    oof_df[\"prediction_oof\"] = np.zeros(oof_df.shape[0])\n",
    "\n",
    "    # Список с метриками по фолдам\n",
    "    metrics = []\n",
    "\n",
    "    # Предсказания на тест. Инициализируем нулями и будем заполнять предсказаниями в процессе валидации.\n",
    "    # Наши предсказания будут усреднением n_splits моделей\n",
    "    pred_test = np.zeros(df_test.shape[0])\n",
    "\n",
    "    # Кросс-валидация\n",
    "    for i, (train_index, valid_index) in enumerate(kf.split(df_train, train_y)):\n",
    "        if verbose:\n",
    "            print(f\"fold_{i} started\")\n",
    "       \n",
    "        X_train = df_train.loc[train_index]\n",
    "        y_train = train_y.loc[train_index].values\n",
    "        \n",
    "        if do_scaling:\n",
    "            scaler = StandardScaler()\n",
    "            columns = X_train.columns\n",
    "            X_train = scaler.fit_transform(X_train)\n",
    "            X_train = pd.DataFrame(X_train)\n",
    "            X_train.columns = columns\n",
    "        \n",
    "        X_valid = df_train.loc[valid_index]\n",
    "        y_valid = train_y.loc[valid_index].values\n",
    "        \n",
    "        if log_transform_target:\n",
    "            y_train = np.log1p(y_train)\n",
    "            y_valid = np.log1p(y_valid)\n",
    "\n",
    "        if do_scaling:\n",
    "            X_valid = scaler.transform(X_valid)\n",
    "            X_valid = pd.DataFrame(X_valid)\n",
    "            X_valid.columns = columns\n",
    "\n",
    "        model_kf = deepcopy(model)\n",
    "      \n",
    "        model_kf.fit(\n",
    "            X_train,\n",
    "            y_train,\n",
    "            plot=False,\n",
    "            eval_set=(X_valid, y_valid),\n",
    "            use_best_model=True,\n",
    "            early_stopping_rounds=50,\n",
    "        )\n",
    "       \n",
    "        if do_scaling:\n",
    "            df_test_scaled = scaler.transform(df_test)\n",
    "            df_test_scaled = pd.DataFrame(df_test_scaled)\n",
    "            df_test_scaled.columns = columns\n",
    "            prediction_kf = model_kf.predict(df_test_scaled)\n",
    "        else:\n",
    "            prediction_kf = model_kf.predict(df_test)\n",
    "        \n",
    "        if log_transform_target:\n",
    "            prediction_kf = np.expm1(prediction_kf)\n",
    "\n",
    "        pred_test += prediction_kf / n_splits\n",
    "        \n",
    "        prediction = model_kf.predict(X_valid)\n",
    "\n",
    "        if log_transform_target:\n",
    "            prediction = np.expm1(prediction)\n",
    "            y_valid = np.expm1(y_valid)\n",
    "        oof_df.loc[valid_index, \"prediction_oof\"] = prediction\n",
    "\n",
    "        cur_metric = mape(y_valid, prediction)\n",
    "        metrics.append(cur_metric)\n",
    "        if verbose:\n",
    "            print(f\"metric_{i}: {cur_metric}\")\n",
    "            print()\n",
    "            print(\"_\" * 100)\n",
    "            print()\n",
    "\n",
    "    metric_OOF = mape(train_y, oof_df[\"prediction_oof\"])\n",
    "\n",
    "    if verbose:\n",
    "        print(f\"metric_OOF: {metric_OOF}\")\n",
    "        print(f\"metric_AVG: {np.mean(metrics)}\")\n",
    "        print(f\"metric_std: {np.std(metrics)}\")\n",
    "        print()\n",
    "        print(\"*\" * 100)\n",
    "        print()\n",
    "\n",
    "    return pred_test, oof_df, metric_OOF\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "cbs_reg = CatBoostRegressor(\n",
    "    loss_function=\"LogLinQuantile\",\n",
    "    learning_rate=0.9,\n",
    "    \n",
    "    random_state=1337,\n",
    "    thread_count=-1,\n",
    "    num_trees=300,\n",
    "    cat_features=[\"city_code\", \"region_code\", \"center_type\", \"category\", \"cuisine\",\"homepage_featured\",\"emailer_for_promotion\"],\n",
    "   verbose=200,depth=12,langevin=True,      \n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fold_0 started\n",
      "0:\tlearn: 1.6630458\ttest: 1.6614723\tbest: 1.6614723 (0)\ttotal: 265ms\tremaining: 1m 19s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.899450403\n",
      "bestIteration = 1\n",
      "\n",
      "Shrink model to first 2 iterations.\n",
      "metric_0: 0.9665658827782178\n",
      "\n",
      "____________________________________________________________________________________________________\n",
      "\n",
      "fold_1 started\n",
      "0:\tlearn: 1.6630104\ttest: 1.6617854\tbest: 1.6617854 (0)\ttotal: 233ms\tremaining: 1m 9s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.8998971585\n",
      "bestIteration = 1\n",
      "\n",
      "Shrink model to first 2 iterations.\n",
      "metric_1: 0.9665259547157415\n",
      "\n",
      "____________________________________________________________________________________________________\n",
      "\n",
      "fold_2 started\n",
      "0:\tlearn: 1.6625500\ttest: 1.6635271\tbest: 1.6635271 (0)\ttotal: 233ms\tremaining: 1m 9s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.9008157746\n",
      "bestIteration = 1\n",
      "\n",
      "Shrink model to first 2 iterations.\n",
      "metric_2: 0.9667008738557206\n",
      "\n",
      "____________________________________________________________________________________________________\n",
      "\n",
      "fold_3 started\n",
      "0:\tlearn: 1.6618571\ttest: 1.6658820\tbest: 1.6658820 (0)\ttotal: 245ms\tremaining: 1m 13s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.9024810983\n",
      "bestIteration = 1\n",
      "\n",
      "Shrink model to first 2 iterations.\n",
      "metric_3: 0.9667935873570747\n",
      "\n",
      "____________________________________________________________________________________________________\n",
      "\n",
      "fold_4 started\n",
      "0:\tlearn: 1.6630843\ttest: 1.6609177\tbest: 1.6609177 (0)\ttotal: 230ms\tremaining: 1m 8s\n",
      "Stopped by overfitting detector  (50 iterations wait)\n",
      "\n",
      "bestTest = 0.8987022403\n",
      "bestIteration = 1\n",
      "\n",
      "Shrink model to first 2 iterations.\n",
      "metric_4: 0.9664144932687869\n",
      "\n",
      "____________________________________________________________________________________________________\n",
      "\n",
      "metric_OOF: 0.9666001583697353\n",
      "metric_AVG: 0.9666001583951083\n",
      "metric_std: 0.00013319978259024933\n",
      "\n",
      "****************************************************************************************************\n",
      "\n"
     ]
    }
   ],
   "source": [
    "pred_test, oof_df, metric_OOF = cv_and_predict(train.drop(['num_orders', 'id','week'], axis=1),\n",
    "                                               test.drop(['id','week'], axis=1), \n",
    "                                               train_y=train['num_orders'],  \n",
    "    n_splits=5, model=cbs_reg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>num_orders</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1256496</td>\n",
       "      <td>2.131574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1298009</td>\n",
       "      <td>2.145528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1348875</td>\n",
       "      <td>2.131574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1272771</td>\n",
       "      <td>2.167109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1313265</td>\n",
       "      <td>2.127053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1392835</td>\n",
       "      <td>2.163363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1405813</td>\n",
       "      <td>2.129436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1294858</td>\n",
       "      <td>2.140194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1115085</td>\n",
       "      <td>2.148728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1423887</td>\n",
       "      <td>2.147299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1250994</td>\n",
       "      <td>2.147299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1204955</td>\n",
       "      <td>2.163165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1129621</td>\n",
       "      <td>2.162736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1197225</td>\n",
       "      <td>2.141298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1377833</td>\n",
       "      <td>2.152009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1378056</td>\n",
       "      <td>2.164358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1055278</td>\n",
       "      <td>2.117456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1447206</td>\n",
       "      <td>1.573747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1099276</td>\n",
       "      <td>2.131654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1275326</td>\n",
       "      <td>2.158856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1006926</td>\n",
       "      <td>2.161854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1040731</td>\n",
       "      <td>2.138819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1023036</td>\n",
       "      <td>2.129588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1263417</td>\n",
       "      <td>2.142493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1147662</td>\n",
       "      <td>2.143069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1164854</td>\n",
       "      <td>2.168533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1287418</td>\n",
       "      <td>2.155238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1403855</td>\n",
       "      <td>2.164935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1441310</td>\n",
       "      <td>1.846864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1198477</td>\n",
       "      <td>2.157799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150530</th>\n",
       "      <td>1325626</td>\n",
       "      <td>2.171285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150531</th>\n",
       "      <td>1093269</td>\n",
       "      <td>2.170877</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150532</th>\n",
       "      <td>1338824</td>\n",
       "      <td>2.167210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150533</th>\n",
       "      <td>1158460</td>\n",
       "      <td>2.165535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150534</th>\n",
       "      <td>1340813</td>\n",
       "      <td>2.167340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150535</th>\n",
       "      <td>1443704</td>\n",
       "      <td>2.171285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150536</th>\n",
       "      <td>1287722</td>\n",
       "      <td>2.171443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150537</th>\n",
       "      <td>1031000</td>\n",
       "      <td>2.171103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150538</th>\n",
       "      <td>1288462</td>\n",
       "      <td>2.170656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150539</th>\n",
       "      <td>1220280</td>\n",
       "      <td>2.166571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150540</th>\n",
       "      <td>1032849</td>\n",
       "      <td>2.166353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150541</th>\n",
       "      <td>1469586</td>\n",
       "      <td>2.166115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150542</th>\n",
       "      <td>1038490</td>\n",
       "      <td>2.165736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150543</th>\n",
       "      <td>1394189</td>\n",
       "      <td>2.166464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150544</th>\n",
       "      <td>1357555</td>\n",
       "      <td>2.165128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150545</th>\n",
       "      <td>1176475</td>\n",
       "      <td>2.170815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150546</th>\n",
       "      <td>1133784</td>\n",
       "      <td>2.167210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150547</th>\n",
       "      <td>1379712</td>\n",
       "      <td>2.167340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150548</th>\n",
       "      <td>1306192</td>\n",
       "      <td>2.169534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150549</th>\n",
       "      <td>1371867</td>\n",
       "      <td>2.167917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150550</th>\n",
       "      <td>1055597</td>\n",
       "      <td>2.168762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150551</th>\n",
       "      <td>1372838</td>\n",
       "      <td>2.165924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150552</th>\n",
       "      <td>1035758</td>\n",
       "      <td>2.169728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150553</th>\n",
       "      <td>1010438</td>\n",
       "      <td>2.171443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150554</th>\n",
       "      <td>1116711</td>\n",
       "      <td>2.171155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150555</th>\n",
       "      <td>1271326</td>\n",
       "      <td>2.170578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150556</th>\n",
       "      <td>1062036</td>\n",
       "      <td>2.171155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150557</th>\n",
       "      <td>1110849</td>\n",
       "      <td>2.170198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150558</th>\n",
       "      <td>1147725</td>\n",
       "      <td>2.170049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150559</th>\n",
       "      <td>1361984</td>\n",
       "      <td>2.166702</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>150560 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             id  num_orders\n",
       "0       1256496    2.131574\n",
       "1       1298009    2.145528\n",
       "2       1348875    2.131574\n",
       "3       1272771    2.167109\n",
       "4       1313265    2.127053\n",
       "5       1392835    2.163363\n",
       "6       1405813    2.129436\n",
       "7       1294858    2.140194\n",
       "8       1115085    2.148728\n",
       "9       1423887    2.147299\n",
       "10      1250994    2.147299\n",
       "11      1204955    2.163165\n",
       "12      1129621    2.162736\n",
       "13      1197225    2.141298\n",
       "14      1377833    2.152009\n",
       "15      1378056    2.164358\n",
       "16      1055278    2.117456\n",
       "17      1447206    1.573747\n",
       "18      1099276    2.131654\n",
       "19      1275326    2.158856\n",
       "20      1006926    2.161854\n",
       "21      1040731    2.138819\n",
       "22      1023036    2.129588\n",
       "23      1263417    2.142493\n",
       "24      1147662    2.143069\n",
       "25      1164854    2.168533\n",
       "26      1287418    2.155238\n",
       "27      1403855    2.164935\n",
       "28      1441310    1.846864\n",
       "29      1198477    2.157799\n",
       "...         ...         ...\n",
       "150530  1325626    2.171285\n",
       "150531  1093269    2.170877\n",
       "150532  1338824    2.167210\n",
       "150533  1158460    2.165535\n",
       "150534  1340813    2.167340\n",
       "150535  1443704    2.171285\n",
       "150536  1287722    2.171443\n",
       "150537  1031000    2.171103\n",
       "150538  1288462    2.170656\n",
       "150539  1220280    2.166571\n",
       "150540  1032849    2.166353\n",
       "150541  1469586    2.166115\n",
       "150542  1038490    2.165736\n",
       "150543  1394189    2.166464\n",
       "150544  1357555    2.165128\n",
       "150545  1176475    2.170815\n",
       "150546  1133784    2.167210\n",
       "150547  1379712    2.167340\n",
       "150548  1306192    2.169534\n",
       "150549  1371867    2.167917\n",
       "150550  1055597    2.168762\n",
       "150551  1372838    2.165924\n",
       "150552  1035758    2.169728\n",
       "150553  1010438    2.171443\n",
       "150554  1116711    2.171155\n",
       "150555  1271326    2.170578\n",
       "150556  1062036    2.171155\n",
       "150557  1110849    2.170198\n",
       "150558  1147725    2.170049\n",
       "150559  1361984    2.166702\n",
       "\n",
       "[150560 rows x 2 columns]"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission = pd.DataFrame()\n",
    "submission[\"id\"] = test_ids\n",
    "submission[\"num_orders\"] = pred_test\n",
    "submission\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 387,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv(\"/Users/mikhailtaipov/Downloads/submission_basefilThe45530027000038.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
